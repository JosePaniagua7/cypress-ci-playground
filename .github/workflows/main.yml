name: Cypress Tests

on:
  push:
    branches-ignore:
      - "renovate/**"

jobs:
  install:
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node-20.12.0-chrome-123.0.6312.86-1-ff-124.0.2-edge-123.0.2420.65-1
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cypress install
        uses: cypress-io/github-action@v6
        with:
          runTests: false
      # report machine parameters
      - run: yarn cypress info
      - run: node --version
      - run: node -p 'os.cpus()'
      - run: yarn types
      - run: yarn lint
      - run: yarn test:unit:ci
      - run: yarn build:ci

      - name: Save build folder
        uses: actions/upload-artifact@v4
        with:
          name: build
          if-no-files-found: error
          path: build

  ui-chrome-tests:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node-20.12.0-chrome-123.0.6312.86-1-ff-124.0.2-edge-123.0.2420.65-1
      options: --user 1001
    needs: install
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving Cypress Cloud hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: [1, 2, 3, 4, 5]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download the build folders
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build

      - name: Node info
        run: node -v

      - name: __e Dir
        run: ls /__e

      - name: "UI Tests - Chrome"
        uses: cypress-io/github-action@v6
        with:
          build: yarn cypress info
          start: yarn start:ci
          wait-on: "http://localhost:3000"
          wait-on-timeout: 120
          browser: chrome
          record: true
          parallel: true
          # group: "UI - Chrome"
          spec: cypress/tests/ui/*
          config-file: cypress.config.ts
        env:
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        #   # Recommended: pass the GitHub token lets this action correctly
        #   # determine the unique run id necessary to re-run the checks
        #   # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   DEBUG: "cypress:server:args"
# name: Cypress Tests
# on: [push]
# jobs:
#   cypress-run:
#     runs-on: ubuntu-latest
#     # Runs tests in parallel with matrix strategy https://docs.cypress.io/guides/guides/parallelization
#     # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
#     # Also see warning here https://github.com/cypress-io/github-action#parallel
#     strategy:
#       fail-fast: false # https://github.com/cypress-io/github-action/issues/48
#       matrix:
#         containers: [1, 2] # Uses 2 parallel instances
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#       - name: Cypress run
#         # Uses the official Cypress GitHub action https://github.com/cypress-io/github-action
#         uses: cypress-io/github-action@v6
#         with:
#           # Starts web server for E2E tests - replace with your own server invocation
#           # https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server
#           start: npm start
#           wait-on: 'http://localhost:3000' # Waits for above
#           # Records to Cypress Cloud 
#           # https://docs.cypress.io/guides/cloud/projects#Set-up-a-project-to-record
#           record: true
#           parallel: true # Runs test in parallel using settings above
#         env:
#           # For recording and parallelization to work you must set your CYPRESS_RECORD_KEY
#           # in GitHub repo → Settings → Secrets → Actions
#           CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
#           # Creating a token https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}